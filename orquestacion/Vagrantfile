# Se requiere la gem 'json' para poder parsear de JSON a hash map
# Cómo leer archivos json extraído de aquí (https://hackhands.com/ruby-read-json-file-hash/)
require 'json'

# Se lee el archivo azdata.json donde se almacenan los datos de la cuenta
# de azure necesarios para conectarse con vagrant. Para crear el archivo
# azdata.json es necesario ejecutar el comando $ az ad sp create-for-rbac > azdata.json
# que crea una aplicación de directorios activa de azure con acceso al gestor de recursos
# de azure para la subscripción activada. El resultado de ese comando es un json que es
# guardado en el archivo azdata.json gracias al operador '>'
file = File.read('azdata.json')

# Parseamos el archivo JSON a un hashmap
hash = JSON.parse(file)

# Extraemnos los datos del hashmap. Los datos de un hash map se extraen
# de la siguiente manera -> value = hashmap['key']

TENANT_ID = hash['tenant']
CLIENT_ID = hash['appId']
CLIENT_SECRET = hash['password']

# Leemos el id de la subscripcion activa del archivo idsubscripcion.txt que se ha creado de manera
# parecida al archivo anterior: az account list --query "[?isDefault].id" -o tsv > idsubscripcion.txt
# En esta ocasión se va leyendo línea a línea (Aunque solo haya una) y se concatena en la variable SUBSCRIPTION_ID
# Cómo leer archivos en ruby extraído de aquí (https://stackoverflow.com/questions/5545068/what-are-all-the-common-ways-to-read-a-file-in-ruby)
SUBSCRIPTION_ID = ''
f = File.open("idsubscripcion.txt", "r")
f.each_line do |line|
  SUBSCRIPTION_ID += line
end

#Eliminamos el salto de linia de la variable con el método chomp (https://ruby-doc.org/core-2.2.0/String.html)
SUBSCRIPTION_ID = SUBSCRIPTION_ID.chomp


# Versión de la API de vagrant que se va a usar
API_version = '2'

# Configuramos Vagrant en la versión de API indicada anteriormente. |config| indica la variable
# de configuración de vagrant que se va a usar dentro del método
Vagrant.configure(API_version) do |config|


  # Definimos la primera máquina virtual que se llamará database en este Vagrantfile
  config.vm.define "database" do |database|
    # Usamos el box que hemos descargado previamente con el comando $ vagrant box add azure https://github.com/azure/vagrant-azure/raw/v2.0/dummy.box --provider azure
    database.vm.box = 'azure'

    # Indicamos la localización de nuestra key para que se copie en la MV y podamos conectarnos
    # por SSH
    database.ssh.private_key_path = '~/.ssh/id_rsa'
=begin
    # Indicamos el nombre del host
    database.vm.hostname = 'dbhostname'

    # Indicamos la ip privada que va a tener la MV. Esto es importante porque tiene que ser
    # la misma ip que se le indica al servicio. (https://blog.ipswitch.com/how-to-create-multi-machine-environments-with-vagrant)
    database.vm.network "private_network", ip: "10.0.0.4"
=end

    # Configuramos el proveedor de la MV con las variables que hemos extraído al principio
    database.vm.provider :azure do |azure, override|

      # Claves para la conexión con azure
      azure.tenant_id = TENANT_ID
      azure.client_id = CLIENT_ID
      azure.client_secret = CLIENT_SECRET
      azure.subscription_id = SUBSCRIPTION_ID

      # El grupo de recursos se llama hito5
      azure.resource_group_name = "hito5"
      # La MV creada se va a llamar MVIssue
      azure.vm_name = "mvdb"
      # El tamaño de la imágen es Standard_A0 (prestaciones básicas)
      azure.vm_size = "Standard_A0"
      # La imágen seleccionada es Ubuntu Sever 18.04 LTS
      azure.vm_image_urn = "Canonical:UbuntuServer:18.04-LTS:latest"
      # La localización del centro de datos es Francia central
      azure.location = "francecentral"
      # Necesitamos abrir el puerto 80 de la MV
      azure.tcp_endpoints = 27017

      azure.virtual_network_name="redprivada"

      # El resto de parámetros se deja por defecto


    end
    # La provisión de la MV va a ser por un script llamado "script.sh" y que se encuentra en este mismo directorio
    # (https://www.vagrantup.com/docs/provisioning/shell.html)
    database.vm.provision "shell", path: "scriptdb.sh"
  end

  # Definimos la segunda máquina virtual que se llamará servicio en este Vagrantfile
  config.vm.define "servicio" do |servicio|
    # Usamos el box que hemos descargado previamente con el comando $ vagrant box add azure https://github.com/azure/vagrant-azure/raw/v2.0/dummy.box --provider azure
    servicio.vm.box = 'azure'

    # Indicamos la localización de nuestra key para que se copie en la MV y podamos conectarnos
    # por SSH
    servicio.ssh.private_key_path = '~/.ssh/id_rsa'
=begin
    # Indicamos el nombre del host
    servicio.vm.hostname = 'servicehostname'

    # Indicamos la ip privada que va a tener la MV. Para esta MV no es necesario pero lo pongo por si se necesita en un futuro
    servicio.vm.network "private_network", ip: "10.0.0.5"
=end


    # Configuramos el proveedor de la MV con las variables que hemos extraído al principio
    servicio.vm.provider :azure do |azure, override|

      # Claves para la conexión con azure
      azure.tenant_id = TENANT_ID
      azure.client_id = CLIENT_ID
      azure.client_secret = CLIENT_SECRET
      azure.subscription_id = SUBSCRIPTION_ID

      # El grupo de recursos se llama hito5
      azure.resource_group_name = "hito5"
      # La MV creada se va a llamar MVIssue
      azure.vm_name = "mvissue"
      # El tamaño de la imágen es Standard_A0 (prestaciones básicas)
      azure.vm_size = "Standard_A0"
      # La imágen seleccionada es Ubuntu Sever 18.04 LTS
      azure.vm_image_urn = "Canonical:UbuntuServer:18.04-LTS:latest"
      # La localización del centro de datos es Francia central
      azure.location = "francecentral"
      # Necesitamos abrir el puerto 80 de la MV
      azure.tcp_endpoints = 80

      azure.virtual_network_name="redprivada"

      # El resto de parámetros se deja por defecto


    end
    # La provisión de la MV va a ser por un script llamado "script.sh" y que se encuentra en este mismo directorio
    # (https://www.vagrantup.com/docs/provisioning/shell.html)
    servicio.vm.provision "shell", path: "scriptweb.sh"
  end




end
